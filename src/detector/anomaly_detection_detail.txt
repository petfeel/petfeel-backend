# 반려견 행동 이상치 탐지 모델 상세 설명
=====================================

1. IsolationForest 모델
---------------------
1) 기본 원리
   - 정상 데이터는 밀집되어 있고, 이상치는 고립되어 있다는 가정
   - 랜덤한 분할을 통해 데이터를 분리
   - 고립된 데이터는 적은 분할로도 분리 가능

2) 작동 방식
   - 입력: 48차원의 특징 벡터 (24개 키포인트 × x,y 좌표)
   - 프로세스:
     * 특징 공간을 랜덤하게 분할
     * 각 데이터 포인트가 분리되는데 필요한 분할 횟수 계산
     * 적은 분할로 분리되는 데이터 = 이상치
   
3) 장점
   - 고차원 데이터에서도 효과적
   - 계산 효율이 좋음
   - 전체적인 이상 패턴 감지에 강함

4) 수식 및 계산
   - 이상치 점수 = 2^(-E(h(x))/c(n))
     * h(x): 데이터 포인트 분리에 필요한 분할 수
     * c(n): 평균 경로 길이 정규화 인자
     * E(h(x)): 평균 경로 길이

2. LocalOutlierFactor 모델
------------------------
1) 기본 원리
   - 데이터의 지역적 밀도를 기반으로 이상치 탐지
   - 주변 데이터와의 밀도 차이를 계산
   - 이웃 데이터와 비교하여 상대적 밀도 측정

2) 작동 방식
   - 입력: 48차원의 특징 벡터
   - 프로세스:
     * k-최근접 이웃(k=4) 찾기
     * 각 포인트의 지역 도달 거리 계산
     * 이웃들과의 상대적 밀도 비교

3) 장점
   - 지역적 이상 패턴 감지에 강함
   - 데이터 밀도 변화에 잘 적응
   - 군집 기반 이상 감지 가능

4) 수식 및 계산
   - 지역 도달 거리(lrd): 1/(Σ(reach-dist_k(p,o)/k))
   - LOF 점수: lrd_ratio = lrd(이웃들의 평균)/lrd(현재 포인트)
   - reach-dist_k(a,b) = max(k-distance(b), d(a,b))

3. 두 모델의 조합 방식
-------------------
1) 점수 정규화
   - 각 모델의 원시 점수를 Z-점수로 변환
   - Z-점수 = (원시점수 - 평균) / 표준편차
   - 범위를 일관되게 만들어 비교 가능하게 함

2) 앙상블 결합
   - 두 모델의 정규화된 점수 평균 계산
   - 가중치는 1:1로 동일하게 적용
   - 최종 점수 = (IF_z_score + LOF_z_score) / 2

3) 임계값 설정
   - 기준: 평균 - (표준편차 × 0.5)
   - 임계값보다 낮은 점수 = 이상행동
   - STD_MULTIPLIER(0.5)로 민감도 조절 가능

4. 실제 구현 예시
--------------
```python
# 특징 벡터 생성
feat = []
for x, y, v in keypoints:
    if v < 0.5:  # 신뢰도가 낮은 경우
        feat += [0.0, 0.0]
    else:
        feat += [(x - pelvis[0])/scale, (y - pelvis[1])/scale]

# 이상치 탐지 모델 적용
if_scores = if_model.decision_function(X)  # IsolationForest 점수
lof_scores = lof_model.decision_function(X)  # LOF 점수

# Z-점수 정규화 및 조합
def z_norm(a):
    return (a - a.mean()) / (a.std() or 1.0)

combined = (z_norm(if_scores) + z_norm(lof_scores)) / 2.0

# 임계값 계산 및 판단
threshold = combined.mean() - STD_MULTIPLIER * combined.std()
is_abnormal = combined[-1] < threshold
```

5. 성능 최적화
------------
1) 계산 효율성
   - IsolationForest: O(n log n) 시간 복잡도
   - LOF: O(n log n) 시간 복잡도
   - 병렬 처리 가능한 구조

2) 메모리 효율성
   - 윈도우 크기만큼만 데이터 유지
   - 오래된 데이터 자동 삭제
   - 필요한 계산만 수행

3) 정확도 향상
   - 두 모델의 장점 결합
   - 전역적/지역적 이상치 모두 감지
   - 오탐지 최소화

6. 모델 튜닝 가이드
----------------
1) IsolationForest 파라미터
   - contamination: 0.2 (이상치 비율)
   - n_estimators: 기본값 사용
   - random_state: 42 (재현성)

2) LOF 파라미터
   - n_neighbors: 4 (이웃 수)
   - contamination: 0.2 (이상치 비율)
   - novelty: True (실시간 예측용)

3) 조합 파라미터
   - STD_MULTIPLIER: 0.5 (전체 민감도)
   - WINDOW_SIZE: 5 (분석 단위)
   - DETECTION_WINDOWS: 5 (연속성 체크) 